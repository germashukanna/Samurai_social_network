{"version":3,"file":"static/js/3.7fb45928.chunk.js","mappings":"kMAiBaA,EAAuCC,EAAAA,MAAW,SAACC,GAE5D,IAAIC,GAASC,EAAAA,EAAAA,IAAU,CACnBC,cAAe,CACXC,QAAS,IAEbC,SAAU,SAACC,GACP,IAAIC,EAA0B,GAO9B,OALKD,EAAMF,QAEAE,EAAMF,QAAQI,OAAS,KAC9BD,EAAMH,QAAU,gBAFhBG,EAAMH,QAAU,WAIbG,GAEXE,SAAU,SAACC,GACHV,EAAMW,UACNX,EAAMW,SAASD,GAEnBT,EAAOW,eAIf,OACI,kBAAMH,SAAUR,EAAOY,aAAvB,WACI,4BACI,SAAC,KAAD,kBACQZ,EAAOa,cAAc,YAD7B,IAEIC,YAAY,sBAAsBC,OAAQf,EAAOgB,WACjDC,MAAM,OAAOC,QAAS,WACtBC,GAAI,CAACC,GAAI,WAEZpB,EAAOqB,OAAOlB,SACRH,EAAOsB,QAAQnB,UACf,gBAAKoB,MAAO,CAACN,MAAO,WAApB,SAAiCjB,EAAOqB,OAAOlB,cAE1D,4BACI,SAAC,IAAD,CAAcqB,SAAU,SACvBzB,EAAM0B,cAAe,mBAAQC,KAAK,SAAb,oBAAwC,a,0FCvD9E,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA4I,0BAA5I,EAAgL,yB,mBCiBhL,EATkD5B,EAAAA,MAAW,SAACC,GAC1D,OACI,gBAAK4B,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAE,mBAAc9B,EAAM+B,IAA/B,SAAsC/B,EAAMgC,YCMxD,EAX4CjC,EAAAA,MAAW,SAACC,GACpD,OAEI,gBAAK4B,UAAWC,EAAhB,SAA4B7B,EAAMI,a,UCyB1C,EA1B4CL,EAAAA,MAAW,SAACC,GAEpD,IAAMiC,EAAkBjC,EAAMkC,YAAYC,YAAYC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAD,CAA4BL,KAAMK,EAAOL,KAC7BD,GAAIM,EAAON,IADNM,EAAON,OAEtFO,EAAmBtC,EAAMkC,YAAYK,aAAaH,KAAI,SAAAhC,GAAO,OAAI,SAAC,EAAD,CAASA,QAASA,EAAQA,SACZA,EAAQ2B,OAK7F,OACI,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKI,KAGL,iBAAKL,UAAWC,EAAhB,WACI,yBAAMS,KACN,0BACI,SAAC,IAAD,CAAgB3B,SAbL,SAACD,GACxBV,EAAMwC,YAAY9B,EAAON,uB,8BCkBjC,GAAeqC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAhBoB,SAACC,GACrB,MAAO,CACHT,YAAaS,EAAMT,gBAIA,SAACU,GACxB,MAAO,CACHJ,YAAa,SAACpC,GACVwC,GAASC,EAAAA,EAAAA,GAAmBzC,SAQpC0C,EAAAA,EAFJ,CAGEC","sources":["Form/Form.tsx","webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport {TextField} from \"@mui/material\";\r\nimport {CustomButton} from \"../common/Button/Button\";\r\n\r\n\r\ntype FormikErrorsType = {\r\n    message?: string | undefined\r\n}\r\n\r\nexport type ValuesType = {\r\n    callback?: (values: ValuesType) => void\r\n    message?: string | undefined\r\n    removeButton?: boolean\r\n};\r\n\r\nexport const AddMessageForm: React.FC<ValuesType> = React.memo((props) => {\r\n\r\n    let formik = useFormik({\r\n        initialValues: {\r\n            message: ''\r\n        },\r\n        validate: (value) => {\r\n            let error: FormikErrorsType = {};\r\n\r\n            if (!value.message) {\r\n                error.message = 'Required';\r\n            } else if (value.message.length > 30) {\r\n                error.message = 'Invalid text';\r\n            }\r\n            return error\r\n        },\r\n        onSubmit: (values: ValuesType) => {\r\n            if (props.callback) {\r\n                props.callback(values)\r\n            }\r\n            formik.resetForm();\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <TextField\r\n                    {...formik.getFieldProps('message')}\r\n                    placeholder=\"Enter yore message.\" onBlur={formik.handleBlur}\r\n                    color=\"info\" variant={'outlined'}\r\n                    sx={{mb: '10px'}}\r\n                />\r\n                {formik.errors.message\r\n                    && formik.touched.message\r\n                    && <div style={{color: '#DF204D'}}>{formik.errors.message}</div>}\r\n            </div>\r\n            <div>\r\n                <CustomButton children={'Send'}/>\r\n                {props.removeButton ? <button type=\"button\">Remove</button> : ''}\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n})","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__lkRRk\",\"dialogsItems\":\"Dialogs_dialogsItems__MZEWl\",\"dialog\":\"Dialogs_dialog__KGrrh\",\"messages\":\"Dialogs_messages__cO1Lu\",\"message\":\"Dialogs_message__wG1eA\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n\r\n}\r\nconst DialogItem: React.FC<DialogItemPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessagePropsType> = React.memo((props) => {\r\n    return (\r\n\r\n        <div className={s.message}>{props.message}</div>\r\n\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageForm, ValuesType} from \"../../Form/Form\";\r\n\r\n\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = React.memo((props) => {\r\n\r\n    const dialogsElements = props.dialogsPage.dialogsData.map(dialog => <DialogItem key={dialog.id} name={dialog.name}\r\n                                                                                    id={dialog.id}/>);\r\n    const messagesElements = props.dialogsPage.messagesData.map(message => <Message message={message.message}\r\n                                                                                    key={message.id}/>);\r\n        const newSendMessage = (values: ValuesType) => {\r\n        props.sendMessage(values.message as string)\r\n        }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageForm callback={newSendMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Dialogs;\r\n\r\n","import {DialogsPageType, sendMessageCreator} from \"../../redux/Dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\n\r\ntype mapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype matDispatchPropsType = {\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = mapStatePropsType & matDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): matDispatchPropsType => {\r\n    return {\r\n        sendMessage: (message: string) => {\r\n            dispatch(sendMessageCreator(message));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs)\r\n"],"names":["AddMessageForm","React","props","formik","useFormik","initialValues","message","validate","value","error","length","onSubmit","values","callback","resetForm","handleSubmit","getFieldProps","placeholder","onBlur","handleBlur","color","variant","sx","mb","errors","touched","style","children","removeButton","type","className","s","to","id","name","dialogsElements","dialogsPage","dialogsData","map","dialog","messagesElements","messagesData","sendMessage","compose","connect","state","dispatch","sendMessageCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}