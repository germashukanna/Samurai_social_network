{"version":3,"file":"static/js/525.0936df00.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my-app/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","webpack://my-app/./src/form/Form.module.css?c372","form/Form.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__lkRRk\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogItemNavLink\":\"DialogItem_dialogItemNavLink__mnxjt\",\"dialog\":\"DialogItem_dialog__MOBP6\"};","import React from 'react';\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n\r\n}\r\nconst DialogItem: React.FC<DialogItemPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink className={s.dialogItemNavLink} to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default DialogItem","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__45sKr\"};","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessagePropsType> = React.memo((props) => {\r\n    return (\r\n\r\n        <div className={s.message}>{props.message}</div>\r\n\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageForm, ValuesType} from \"../../form/Form\";\r\n\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = React.memo((props) => {\r\n\r\n    const dialogsElements = props.dialogsPage.dialogsData.map(dialog => <DialogItem key={dialog.id} name={dialog.name}\r\n                                                                                    id={dialog.id}/>);\r\n    const messagesElements = props.dialogsPage.messagesData.map(message => <Message message={message.message}\r\n                                                                                    key={message.id}/>);\r\n    const newSendMessage = (values: ValuesType) => {\r\n        props.sendMessage(values.message as string)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messagesDialogs}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageForm callback={newSendMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Dialogs;\r\n\r\n","import {DialogsPageType, sendMessageCreator} from \"../../redux/Dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\n\r\ntype mapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype matDispatchPropsType = {\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = mapStatePropsType & matDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): matDispatchPropsType => {\r\n    return {\r\n        sendMessage: (message: string) => {\r\n            dispatch(sendMessageCreator(message));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formCustomButton\":\"Form_formCustomButton__E6wPZ\"};","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {TextField} from \"@mui/material\";\r\nimport {CustomButton} from \"../common/Button/Button\";\r\nimport s from './Form.module.css'\r\n\r\n\r\ntype FormikErrorsType = {\r\n    message?: string | undefined\r\n}\r\n\r\nexport type ValuesType = {\r\n    callback?: (values: ValuesType) => void\r\n    message?: string | undefined\r\n    removeButton?: boolean\r\n};\r\n\r\nexport const AddMessageForm: React.FC<ValuesType> = React.memo((props) => {\r\n\r\n    let formik = useFormik({\r\n        initialValues: {\r\n            message: ''\r\n        },\r\n        validate: (value) => {\r\n            let error: FormikErrorsType = {};\r\n\r\n            if (!value.message) {\r\n                error.message = 'Required';\r\n            } else if (value.message.length > 30) {\r\n                error.message = 'Invalid text';\r\n            }\r\n            return error\r\n        },\r\n        onSubmit: (values: ValuesType) => {\r\n            if (props.callback) {\r\n                props.callback(values)\r\n            }\r\n            formik.resetForm();\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <TextField\r\n                    {...formik.getFieldProps('message')}\r\n                    placeholder=\"Enter yore message.\" onBlur={formik.handleBlur}\r\n                    color=\"info\" variant={'outlined'}\r\n                    sx={{mb: '10px', ml: '10px'}}\r\n                />\r\n                {formik.errors.message\r\n                    && formik.touched.message\r\n                    && <div style={{color: '#DF204D'}}>{formik.errors.message}</div>}\r\n            </div>\r\n            <div className={s.formCustomButton}>\r\n                <CustomButton children={'Send'}/>\r\n                {props.removeButton ? <button type=\"button\">Remove</button> : ''}\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n})","import React, {JSXElementConstructor} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n\r\n});\r\n\r\nexport function withAuthRedirect<T>(Component: JSXElementConstructor<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to={\"/login\"}/>;\r\n        return <Component {...restProps as T}/>;\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["React","props","className","s","to","id","name","message","dialogsElements","dialogsPage","dialogsData","map","dialog","messagesElements","messagesData","callback","values","sendMessage","compose","connect","state","dispatch","sendMessageCreator","withAuthRedirect","Dialogs","AddMessageForm","formik","useFormik","initialValues","validate","value","error","length","onSubmit","resetForm","handleSubmit","TextField","getFieldProps","placeholder","onBlur","handleBlur","color","variant","sx","mb","ml","errors","touched","style","children","removeButton","type","mapStateToPropsForRedirect","isAuth","auth","Component","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}