{"version":3,"file":"static/js/555.6310ad6f.chunk.js","mappings":"+JACA,GAAgB,kBAAoB,oCAAoC,WAAa,8B,2DCe/EA,EAAO,WACT,IAAMC,GAAWC,EAAAA,EAAAA,KAEXC,GAASC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UASlD,OAPAI,EAAAA,EAAAA,YAAU,WAEN,OADAN,GAASO,EAAAA,EAAAA,OACF,WACHP,GAASQ,EAAAA,EAAAA,UAEd,KAGC,2BACgB,UAAXN,IAAsB,2EAEvB,SAACO,EAAD,KACA,SAACC,EAAD,QAMND,EAAW,WAEb,IAAME,GAAWR,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKM,YAC9CC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAoDC,EAAAA,EAAAA,WAAS,GAA7D,eAAOC,EAAP,KAA2BC,EAA3B,KAiBA,OANAV,EAAAA,EAAAA,YAAU,WACmB,IAAD,EAApBS,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAG1D,CAACR,KAEA,iBAAKS,UAAWC,EAAAA,kBAAqBC,SAhBnB,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC9Ef,GAAsBC,GAAsB,GAE5CD,GAAsBC,GAAsB,IAWhD,UACKL,EAASoB,KAAI,SAACC,EAAGC,GAAJ,OAAc,SAACC,EAAD,CAAqBC,QAASH,GAAhBC,OAC1C,gBAAKG,IAAKxB,QAKhBsB,EAAkDG,EAAAA,MAAW,YAAgB,IAAdF,EAAa,EAAbA,QAEjE,OACI,4BACI,gBAAKG,IAAKH,EAAQI,MAAOnB,UAAWC,EAAAA,aADxC,KACwD,uBAAIc,EAAQK,YAChE,kBACCL,EAAQA,SACT,wBAKNzB,EAAqB,WAEvB,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOqB,EAAP,KAAgBM,EAAhB,KACMvC,GAASC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAE5CF,GAAWC,EAAAA,EAAAA,KAUjB,OACI,4BACI,0BACI,SAACyC,EAAA,EAAD,CACIC,YAAY,sBACZC,MAAM,OAAOC,QAAS,WACtBC,GAAI,CAACC,GAAI,OAAQC,GAAI,QACrBC,MAAOd,EACPe,SAAU,SAAC3B,GAAD,OAAOkB,EAAWlB,EAAEE,cAAcwB,aAIpD,gBAAK7B,UAAWC,EAAAA,iBAAhB,UACI,SAAC,IAAD,CAAc8B,SAAU,OAAQC,QArBxB,WACXjB,IAGLnC,GAASqD,EAAAA,EAAAA,IAAalB,IACtBM,EAAW,MAiBWa,SAAqB,UAAXpD,UAOxC,EA5GiB,WACb,OACI,0BACI,SAACH,EAAD","sources":["webpack://my-app/./src/pages/chat/Messages.module.css?ad73","pages/chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messagesContainer\":\"Messages_messagesContainer__L3Ial\",\"messageImg\":\"Messages_messageImg__l3E12\"};","import s from './Messages.module.css'\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\nimport {CustomButton} from \"../../common/Button/Button\";\r\nimport {ChatMessageType} from \"../../api/Chat-api\";\r\nimport {useAppDispatch, useAppSelector} from \"../../redux/Hooks\";\r\nimport {sendMessages, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\n\r\nconst ChatPage = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const status = useAppSelector(state => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n\r\n            <Messages/>\r\n            <AddMessageChatForm/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages = () => {\r\n\r\n    const messages = useAppSelector(state => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [autoScrollIsActive, setAutoScrollIsActive] = useState(false)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n           !autoScrollIsActive && setAutoScrollIsActive(true)\r\n        }else {\r\n            autoScrollIsActive && setAutoScrollIsActive(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (autoScrollIsActive) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n\r\n    }, [messages])\r\n    return (\r\n        <div className={s.messagesContainer} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = React.memo(({message}) => {\r\n\r\n    return (\r\n        <div>\r\n            <img src={message.photo} className={s.messageImg}/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageChatForm = () => {\r\n\r\n    const [message, setMessage] = useState('')\r\n    const status = useAppSelector(state => state.chat.status)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessages(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField\r\n                    placeholder=\"Enter yore message.\"\r\n                    color=\"info\" variant={'outlined'}\r\n                    sx={{mb: '10px', ml: '10px'}}\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.currentTarget.value)}\r\n                />\r\n\r\n            </div>\r\n            <div className={s.formCustomButton}>\r\n                <CustomButton children={'Send'} onClick={sendMessage}\r\n                              disabled={status !== 'ready'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ChatPage"],"names":["Chat","dispatch","useAppDispatch","status","useAppSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageChatForm","messages","messagesAnchorRef","useRef","useState","autoScrollIsActive","setAutoScrollIsActive","current","scrollIntoView","behavior","className","s","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","ref","React","src","photo","userName","setMessage","TextField","placeholder","color","variant","sx","mb","ml","value","onChange","children","onClick","sendMessages","disabled"],"sourceRoot":""}