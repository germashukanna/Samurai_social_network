{"version":3,"file":"static/js/515.6baaf24c.chunk.js","mappings":"oMAiBaA,EAAuCC,EAAAA,MAAW,SAACC,GAE5D,IAAIC,GAASC,EAAAA,EAAAA,IAAU,CACnBC,cAAe,CACXC,QAAS,IAEbC,SAAU,SAACC,GACP,IAAIC,EAA0B,GAO9B,OALKD,EAAMF,QAEAE,EAAMF,QAAQI,OAAS,KAC9BD,EAAMH,QAAU,gBAFhBG,EAAMH,QAAU,WAIbG,GAEXE,SAAU,SAACC,GACHV,EAAMW,UACNX,EAAMW,SAASD,GAEnBT,EAAOW,eAIf,OACI,kBAAMH,SAAUR,EAAOY,aAAvB,WACI,4BACI,SAAC,KAAD,kBACQZ,EAAOa,cAAc,YAD7B,IAEIC,YAAY,sBAAsBC,OAAQf,EAAOgB,WACjDC,MAAM,OAAOC,QAAS,WACtBC,GAAI,CAACC,GAAI,WAEZpB,EAAOqB,OAAOlB,SACRH,EAAOsB,QAAQnB,UACf,gBAAKoB,MAAO,CAACN,MAAO,WAApB,SAAiCjB,EAAOqB,OAAOlB,cAE1D,4BACI,SAAC,IAAD,CAAcqB,SAAU,SACvBzB,EAAM0B,cAAe,mBAAQC,KAAK,SAAb,oBAAwC,a,uLCvD9E,EAAmC,sCAAnC,EAAqF,+BAArF,EAAoI,mC,oBCApI,EAAwC,qD,SCQ3BC,EAAuB,SAAC5B,GAEjC,OAAgC6B,EAAAA,EAAAA,WAAkB,GAAlD,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAAiB7B,EAAMgC,QAAnD,eAAOA,EAAP,KAAeC,EAAf,MAIAC,EAAAA,EAAAA,YAAU,WACND,EAAUjC,EAAMgC,UAClB,CAAChC,EAAMgC,SAiBT,OACI,iBAAKG,UAAWC,EAAhB,WACI,0CAEEN,IACE,0BACI,iBAAMO,cArBG,WACrBN,GAAY,IAoBA,SAAwC/B,EAAMgC,QAAU,aAK/DF,IACG,0BACI,kBAAOQ,SAxBA,SAACC,GACpBN,EAAUM,EAAEC,cAAclC,QAuBmBA,MAAO0B,EAAQhB,OApBrC,WAEvBe,GAAY,GACZ/B,EAAMyC,eAAeT,IAiBmEU,WAAW,U,gFC/C3G,GAAgB,YAAc,qCAAqC,SAAW,mC,mECCxEC,EAAY,CAAC,YAAa,a,cCG1BC,EDIS,WAAiC,IAAdC,EAAc,uDAAJ,GAExCC,EAIED,EAJFC,aADF,EAKID,EAHFE,iBAAAA,OAFF,MAEqB,cAFrB,EAGEC,EAEEH,EAFFG,kBAHF,EAKIH,EADFI,gBAAAA,OAJF,MAIoBC,EAAAA,EAJpB,EAMMC,GAAUC,EAAAA,EAAAA,IAAO,MAAPA,CAAcH,GACxBL,EAAmB7C,EAAAA,YAAiB,SAAasD,EAASC,GAC9D,IAAMC,GAAQC,EAAAA,EAAAA,GAASV,GAEjBW,GAAgBC,EAAAA,EAAAA,GAAaL,GAEjClB,EAEEsB,EAFFtB,UAFI,EAIFsB,EADFE,UAAAA,OAHI,MAGQ,MAHR,EAKAC,GAAQC,EAAAA,EAAAA,GAA8BJ,EAAed,GAE3D,OAAoBmB,EAAAA,EAAAA,KAAKX,GAASY,EAAAA,EAAAA,GAAS,CACzCC,GAAIL,EACJL,IAAKA,EACLnB,WAAW8B,EAAAA,EAAAA,GAAK9B,EAAWa,EAAoBA,EAAkBD,GAAoBA,GACrFQ,MAAOA,GACNK,OAEL,OAAOhB,EC7BGsB,CAAU,CACpBpB,cAFmBqB,E,QAAAA,KAGnBpB,iBAAkB,cAClBC,kBAAmBoB,EAAAA,EAAAA,WA0BrB,ICZaC,EAAsD,SAACrE,GAEhE,IAAIsE,GAAWC,EAAAA,EAAAA,KAEXtE,GAASC,EAAAA,EAAAA,IAAU,CACnBC,cAAe,CACXqE,QAAS,GACTC,gBAAgB,EAChBC,0BAA2B,GAC3BC,SAAU,GACVC,SAAU,CACNC,OAAQ,GACRC,QAAS,GACTC,SAAU,GACVC,UAAW,KAGnBvE,SAAU,SAACC,GACP4D,GAASW,EAAAA,EAAAA,IAAYvE,OAK7B,OACI,gBAAKyB,UAAWC,EAAAA,QAAhB,UACI,iBAAM3B,SAAUR,EAAOY,aAAvB,UACI,SAACqE,EAAA,EAAD,CAAa/C,UAAWC,EAAAA,YAAxB,UACI,UAAC+C,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAQzD,KAAM,SAAUR,QAAS,WAAYD,MAAO,YAAamE,KAAM,SAAvE,mBAIA,SAAC,EAAD,WACR,uCACQpF,EAAOa,cAAc,aAD7B,IAEIC,YAAY,wBAAwBC,OAAQf,EAAOgB,WACnDC,MAAM,kBAGF,SAAC,EAAD,WACI,SAACoE,EAAA,EAAD,CAAkBC,MAAO,oBAAqBC,SAAS,SAACC,EAAA,EAAD,CAAUvE,MAAO,YACPoB,SAAUrC,EAAOyF,aACjBC,QAAS1F,EAAOS,OAAO+D,eACvBmB,KAAK,wBAE1E,SAAC,EAAD,WACA,uCACQ3F,EAAOa,cAAc,8BAD7B,IAEIC,YAAY,cAAcC,OAAQf,EAAOgB,WACzCC,MAAM,kBAGV,SAAC,EAAD,WACA,uCACQjB,EAAOa,cAAc,YAD7B,IAEIC,YAAY,WAAWC,OAAQf,EAAOgB,WACtCC,MAAM,kBAGV,4BACI,qCADJ,MACsB,iBAClBiB,UAAWC,EAAAA,SADO,WAElB,0BACI,qCAAW,uCACHnC,EAAOa,cAAc,oBADlB,IAEPC,YAAY,SAASC,OAAQf,EAAOgB,WACpCC,MAAM,YAAY0E,KAAK,2BAG/B,0BACI,uCAAa,uCACL3F,EAAOa,cAAc,sBADhB,IAETC,YAAY,WAAWC,OAAQf,EAAOgB,WAAY2E,KAAK,oBACvD1E,MAAM,qBAGd,0BACI,wCAAc,uCACNjB,EAAOa,cAAc,uBADf,IAEVC,YAAY,YAAYC,OAAQf,EAAOgB,WACvCC,MAAM,YAAY0E,KAAK,8BAG/B,0BACI,sCAAY,uCACJ3F,EAAOa,cAAc,qBADjB,IAERC,YAAY,SAASC,OAAQf,EAAOgB,WACpCC,MAAM,YAAY0E,KAAK,2C,UC5G3D,EAAoC,uCCWvBC,EAA8C,SAAC7F,GACxD,OACI,gCACKA,EAAM8F,UAAW,gBAAK3D,UAAWC,EAAhB,UACd,SAAC,IAAD,CAAcX,SAAU,eAAgBsE,QAAS/F,EAAMgG,kBAE3D,wBAAKhG,EAAMiG,QAAQtB,YACnB,0BACI,sCADJ,IACuB3E,EAAMiG,QAAQzB,YAErC,0BACI,+CAA2BxE,EAAMiG,QAAQxB,eAD7C,KAC6D,qCAE5DzE,EAAMiG,QAAQxB,iBACX,6BAAKzE,EAAMiG,QAAQvB,8BAEvB,4BACI,qCACC1E,EAAMiG,QAAQrB,SAASG,WAAY,0BAAG,qCAAH,IAAqB/E,EAAMiG,QAAQrB,SAASG,YAC/E/E,EAAMiG,QAAQrB,SAASE,UAAW,0BAAG,qCAAH,IAAqB9E,EAAMiG,QAAQrB,SAASE,WAC9E9E,EAAMiG,QAAQrB,SAASsB,KAAM,0BAAG,+BAAH,IAAelG,EAAMiG,QAAQrB,SAASsB,MACnElG,EAAMiG,QAAQrB,SAASuB,UAAW,0BAAG,oCAAH,IAAoBnG,EAAMiG,QAAQrB,SAASuB,WAC7EnG,EAAMiG,QAAQrB,SAASI,YACpB,0BAAG,sCAAH,IAAsBhF,EAAMiG,QAAQrB,SAASI,aAChDhF,EAAMiG,QAAQrB,SAASwB,UAAW,0BAAG,oCAAH,IAAoBpG,EAAMiG,QAAQrB,SAASwB,WAC7EpG,EAAMiG,QAAQrB,SAASC,SAAU,0BAAG,mCAAH,IAAmB7E,EAAMiG,QAAQrB,SAASC,UAC3E7E,EAAMiG,QAAQrB,SAASyB,WAAY,0BAAG,qCAAH,IAAqBrG,EAAMiG,QAAQrB,SAASyB,mBC/BnFC,EAAuC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAChE,OACI,4BACI,uBAAID,IADR,KAC4BC,MC2CpC,EAhC2CzG,EAAAA,MAAW,SAACC,GACnD,OAAgC6B,EAAAA,EAAAA,WAAkB,GAAlD,eAAOC,EAAP,KAAiBC,EAAjB,KACMuC,GAAWC,EAAAA,EAAAA,KACjB,IAAKvE,EAAMiG,QACP,OAAO,SAACQ,EAAA,EAAD,IAUX,OACI,0BACI,iBAAKtE,UAAWC,EAAhB,WACI,gBAAKsE,IAAK1G,EAAMiG,QAAQU,OAAOC,OAASC,EAAW1E,UAAWC,IAC7DpC,EAAM8F,UAAW,kBAAOnE,KAAM,OAAQW,SAXvB,SAACC,GACrBA,EAAEuE,OAAOC,OAASxE,EAAEuE,OAAOC,MAAMvG,QACjC8D,GAAS0C,EAAAA,EAAAA,IAAUzE,EAAEuE,OAAOC,MAAM,MASwC5E,UAAWC,IAChFN,GACK,SAACuC,EAAD,CAAiB4C,cAAe,WAE9BlF,GAAY,IAASkE,QAASjG,EAAMiG,WACtC,SAACJ,EAAD,CAAaI,QAASjG,EAAMiG,QAASH,QAAS9F,EAAM8F,QAASE,aAAc,WACzEjE,GAAY,OAEpB,SAACuE,EAAD,CAAUE,aAAcxG,EAAMwG,aAAcD,aAAcvG,EAAMwG,gBAChE,SAAC5E,EAAD,CAAuBI,OAAQhC,EAAMgC,OAAQS,eAAgBzC,EAAMyC,yBC/CnF,EAAiC,gCAAjC,EAA4E,0BAA5E,EAAkH,2BAAlH,EAAqJ,uBCArJ,EAAwB,oBAAxB,EAAmD,mBAAnD,EAAoF,0BCoBpF,EAbsC1C,EAAAA,MAAW,SAACC,GAC9C,OACI,iBAAKmC,UAAWC,EAAhB,WACI,gBACIsE,IAAK,uFACLQ,IAAK,MACT,iBAAM/E,UAAWC,EAAjB,SAAiCpC,EAAMI,WACvC,iBAAM+B,UAAWC,EAAjB,SAA0BpC,EAAMmH,c,UCgB5C,GAxB4CpH,EAAAA,MAAW,SAACC,GAGpD,IAAMoH,EAAgBpH,EAAMqH,YAAYC,MAAMC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAiBpH,QAASoH,EAAEC,KAAMN,MAAOK,EAAEE,YAAhCF,EAAEG,OAOpE,OACI,gBAAKxF,UAAWC,EAAhB,UACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,uCAEJ,SAAC,IAAD,CAAgBzB,SAVL,SAACD,GACpBV,EAAM4H,WAAWlH,EAAON,aAUhB,gBAAK+B,UAAWC,EAAhB,SACKgF,Y,WCSrB,IAFgCS,EAAAA,GAAAA,KAfD,SAACC,GAC5B,MAAO,CACHT,YAAaS,EAAMT,gBAIO,SAAC/C,GAC/B,MAAO,CACHsD,WAAY,SAACxH,GACTkE,GAASyD,EAAAA,EAAAA,IAAsB3H,QAMXyH,CAA6CG,IChB7E,GAV4CjI,EAAAA,MAAW,SAACC,GAEpD,OACA,4BACI,SAAC,EAAD,CAAaiG,QAASjG,EAAMiG,QAAUjE,OAAQhC,EAAMgC,OAAQS,eAAgBzC,EAAMyC,eACrEqD,QAAS9F,EAAM8F,QAASkB,UAAWhH,EAAMgH,aACtD,SAAC,GAAD,U,sBCeFiB,GAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAoCD,OApCCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WAEI,IAAIC,EAASC,KAAKnI,MAAMoI,OAAOC,OAAOH,OACjCA,IACDA,EAASC,KAAKnI,MAAMsI,kBAExBH,KAAKnI,MAAMuI,eAAeL,GAC1BC,KAAKnI,MAAMwI,YAAYN,KAC1B,+BAED,WACIC,KAAKM,mBACR,gCAED,SAAmBC,EAAuCC,EAAyBC,GAE3ET,KAAKnI,MAAMoI,OAAOC,OAAOH,QAAUQ,EAAUN,OAAOC,OAAOH,QAC3DC,KAAKM,mBAEZ,oBAED,WACI,OACI,0BACI,SAAC,IAAD,kBAAaN,KAAKnI,OAAlB,IAES8F,SAAUqC,KAAKnI,MAAMoI,OAAOC,OAAOH,OACnCjC,QAASkC,KAAKnI,MAAMiG,QACpBjE,OAAQmG,KAAKnI,MAAMgC,OACnBS,eAAgB0F,KAAKnI,MAAMyC,eAC3BuE,UAAWmB,KAAKnI,MAAMgH,mBAI1C,EApCCiB,CAAyBlI,EAAAA,WAiDlB8I,GAAa,SAACC,GAavB,OAZA,SAAiC9I,GAC7B,IAAI+I,GAAWC,EAAAA,GAAAA,MACXC,GAAWC,EAAAA,GAAAA,MACXb,GAASc,EAAAA,GAAAA,MACb,OACI,SAACL,GAAD,kBACQ9I,GADR,IAEIoI,OAAQ,CAACW,SAAAA,EAAUE,SAAAA,EAAUZ,OAAAA,QAY7C,IAAee,EAAAA,GAAAA,KACXvB,EAAAA,GAAAA,KA/BkB,SAACC,GAAD,MAA+C,CACjE7B,QAAS6B,EAAMT,YAAYpB,QAC3BjE,OAAQ8F,EAAMT,YAAYrF,OAC1BsG,iBAAkBR,EAAMuB,KAAK1B,GAC7B2B,OAAQxB,EAAMuB,KAAKC,OACnBxD,QAASgC,EAAMT,YAAYvB,QAC3BkB,UAAWc,EAAMT,YAAYC,SA0BzB,CAACiB,eAAAA,EAAAA,GAAgBC,YAAAA,EAAAA,GAAa/F,eAAAA,EAAAA,GAAgBuE,UAAAA,EAAAA,KAClD6B,GACAU,EAAAA,EAJJ,CAKEtB","sources":["Form/Form.tsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://my-app/./src/components/Profile/ProfileInfo/ProfilIStatusWithHook.module.css?38b8","components/Profile/ProfileInfo/ProfilIStatusWithHooks.tsx","webpack://my-app/./src/components/Profile/Contacts/ProfileDataForm.module.css?616d","../node_modules/@mui/system/esm/createBox.js","../node_modules/@mui/material/Box/Box.js","components/Profile/Contacts/ProfileDataForm.tsx","webpack://my-app/./src/components/Profile/Contacts/ProfileData.module.css?7a5b","components/Profile/Contacts/ProfileData.tsx","components/Profile/Contacts/Contscts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsConteiner.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport {TextField} from \"@mui/material\";\r\nimport {CustomButton} from \"../common/Button/Button\";\r\n\r\n\r\ntype FormikErrorsType = {\r\n    message?: string | undefined\r\n}\r\n\r\nexport type ValuesType = {\r\n    callback?: (values: ValuesType) => void\r\n    message?: string | undefined\r\n    removeButton?: boolean\r\n};\r\n\r\nexport const AddMessageForm: React.FC<ValuesType> = React.memo((props) => {\r\n\r\n    let formik = useFormik({\r\n        initialValues: {\r\n            message: ''\r\n        },\r\n        validate: (value) => {\r\n            let error: FormikErrorsType = {};\r\n\r\n            if (!value.message) {\r\n                error.message = 'Required';\r\n            } else if (value.message.length > 30) {\r\n                error.message = 'Invalid text';\r\n            }\r\n            return error\r\n        },\r\n        onSubmit: (values: ValuesType) => {\r\n            if (props.callback) {\r\n                props.callback(values)\r\n            }\r\n            formik.resetForm();\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <TextField\r\n                    {...formik.getFieldProps('message')}\r\n                    placeholder=\"Enter yore message.\" onBlur={formik.handleBlur}\r\n                    color=\"info\" variant={'outlined'}\r\n                    sx={{mb: '10px'}}\r\n                />\r\n                {formik.errors.message\r\n                    && formik.touched.message\r\n                    && <div style={{color: '#DF204D'}}>{formik.errors.message}</div>}\r\n            </div>\r\n            <div>\r\n                <CustomButton children={'Send'}/>\r\n                {props.removeButton ? <button type=\"button\">Remove</button> : ''}\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n})","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__AQSqX\",\"mainPhoto\":\"ProfileInfo_mainPhoto__pu-Xb\",\"inputTypeFile\":\"ProfileInfo_inputTypeFile__pSWtk\"};","// extracted by mini-css-extract-plugin\nexport default {\"ProfilIStatusWithHook\":\"ProfilIStatusWithHook_ProfilIStatusWithHook__-q88U\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfilIStatusWithHook.module.css'\r\n\r\ntype ProfileStatusWithHooksPropsType = {\r\n    status: string\r\n    updateStatusTC:(status:string)=>any\r\n}\r\n\r\n\r\nexport const ProfilIStatusWithHook =(props:ProfileStatusWithHooksPropsType)=>  {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    // debugger\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        //debugger\r\n        setEditMode(false)\r\n        props.updateStatusTC(status)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.ProfilIStatusWithHook}>\r\n            <h3>User status:</h3>\r\n            {/*если у нас false отображаем эту div*/}\r\n            {!editMode && // если не эдит мод покажи спан\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '------'}</span>\r\n                </div>\r\n            }\r\n\r\n            {/*если у нас true отображаем эту div*/}\r\n            {editMode && //если будет эдитмод покажи импут\r\n                <div>\r\n                    <input onChange={onStatusChange} value={status} onBlur={deactivateEditMode} autoFocus={true}/>\r\n                </div>\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"ProfileDataForm_formControl__niVxu\",\"contacts\":\"ProfileDataForm_contacts__M56O0\"};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport styled from '@mui/styled-engine';\nimport defaultStyleFunctionSx, { extendSxProp } from './styleFunctionSx';\nimport useTheme from './useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function createBox(options = {}) {\n  const {\n    defaultTheme,\n    defaultClassName = 'MuiBox-root',\n    generateClassName,\n    styleFunctionSx = defaultStyleFunctionSx\n  } = options;\n  const BoxRoot = styled('div')(styleFunctionSx);\n  const Box = /*#__PURE__*/React.forwardRef(function Box(inProps, ref) {\n    const theme = useTheme(defaultTheme);\n\n    const _extendSxProp = extendSxProp(inProps),\n          {\n      className,\n      component = 'div'\n    } = _extendSxProp,\n          other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded);\n\n    return /*#__PURE__*/_jsx(BoxRoot, _extends({\n      as: component,\n      ref: ref,\n      className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),\n      theme: theme\n    }, other));\n  });\n  return Box;\n}","import { createBox } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '../className';\nimport { createTheme } from '../styles';\nconst defaultTheme = createTheme();\nconst Box = createBox({\n  defaultTheme,\n  defaultClassName: 'MuiBox-root',\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport FormControl from \"@mui/material/FormControl/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox/Checkbox\";\r\nimport s from './ProfileDataForm.module.css'\r\nimport {saveProfile} from \"../../../redux/Profile-reducer\";\r\nimport {useAppDispatch} from \"../../../redux/Hooks\";\r\nimport {getProfileResponseType} from \"../../../Api/api\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\n\r\ntype FormikErrorsType = {\r\n    message?: string | undefined\r\n}\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: getProfileResponseType\r\n    notToEditMode: () => void\r\n}\r\nexport const ProfileDataForm: React.FC<ProfileDataFormPropsType> = (props) => {\r\n\r\n    let dispatch = useAppDispatch()\r\n\r\n    let formik = useFormik({\r\n        initialValues: {\r\n            aboutMe: \"\",\r\n            lookingForAJob: false,\r\n            lookingForAJobDescription: \"\",\r\n            fullName: '',\r\n            contacts: {\r\n                github: '',\r\n                website: '',\r\n                facebook: '',\r\n                instagram: ''\r\n            }\r\n        },\r\n        onSubmit: (values: getProfileResponseType) => {\r\n            dispatch(saveProfile(values))\r\n            // props.notToEditMode\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl className={s.formControl}>\r\n                    <FormGroup>\r\n                        <Button type={'submit'} variant={'outlined'} color={'secondary'} size={'medium'}\r\n                        >\r\n                            save\r\n                        </Button>\r\n                        <Box>\r\n                <textarea\r\n                    {...formik.getFieldProps('fullName')}\r\n                    placeholder=\"Enter yore full name.\" onBlur={formik.handleBlur}\r\n                    color=\"secondary\"\r\n                />\r\n                        </Box>\r\n                        <Box>\r\n                            <FormControlLabel label={'looking for a job'} control={<Checkbox color={'secondary'}\r\n                                                                                             onChange={formik.handleChange}\r\n                                                                                             checked={formik.values.lookingForAJob}\r\n                                                                                             name='lookingForAJob'/>}/>\r\n                        </Box>\r\n                        <Box>\r\n                        <textarea\r\n                            {...formik.getFieldProps('lookingForAJobDescription')}\r\n                            placeholder=\"Description\" onBlur={formik.handleBlur}\r\n                            color=\"secondary\"\r\n                        />\r\n                        </Box>\r\n                        <Box>\r\n                        <textarea\r\n                            {...formik.getFieldProps('aboutMe')}\r\n                            placeholder=\"About me\" onBlur={formik.handleBlur}\r\n                            color=\"secondary\"\r\n                        />\r\n                        </Box>\r\n                        <div>\r\n                            <b>Contacts:</b>: <div\r\n                            className={s.contacts}>\r\n                            <div>\r\n                                <b>Github: <textarea\r\n                                    {...formik.getFieldProps('contacts.github')}\r\n                                    placeholder=\"github\" onBlur={formik.handleBlur}\r\n                                    color=\"secondary\" name='contacts.github'\r\n                                /></b>\r\n                            </div>\r\n                            <div>\r\n                                <b>Facebook: <textarea\r\n                                    {...formik.getFieldProps('contacts.facebook')}\r\n                                    placeholder=\"facebook\" onBlur={formik.handleBlur} name='contacts.facebook'\r\n                                    color=\"secondary\"\r\n                                /></b>\r\n                            </div>\r\n                            <div>\r\n                                <b>Instagram: <textarea\r\n                                    {...formik.getFieldProps('contacts.instagram')}\r\n                                    placeholder=\"instagram\" onBlur={formik.handleBlur}\r\n                                    color=\"secondary\" name='contacts.instagram'\r\n                                /></b>\r\n                            </div>\r\n                            <div>\r\n                                <b>Website: <textarea\r\n                                    {...formik.getFieldProps('contacts.website')}\r\n                                    placeholder=\"github\" onBlur={formik.handleBlur}\r\n                                    color=\"secondary\" name='contacts.website'\r\n                                /></b>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"editProfileButton\":\"ProfileData_editProfileButton__tyEn3\"};","import React from \"react\";\r\nimport {ProfileType} from \"../../../redux/Profile-reducer\";\r\nimport {CustomButton} from \"../../../common/Button/Button\";\r\nimport s from './ProfileData.module.css'\r\n\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = (props) => {\r\n    return (\r\n        <>\r\n            {props.isOwner && <div className={s.editProfileButton}>\r\n                <CustomButton children={'edit profile'} onClick={props.goToEditMode}/>\r\n            </div>}\r\n            <h2>{props.profile.fullName}</h2>\r\n            <p>\r\n                <b>About me: </b> {props.profile.aboutMe}\r\n            </p>\r\n            <p>\r\n                <b>Looking for a job: </b>{props.profile.lookingForAJob} <span>yes</span>\r\n            </p>\r\n            {props.profile.lookingForAJob &&\r\n                <p> {props.profile.lookingForAJobDescription}</p>\r\n            }\r\n            <div>\r\n                <b>Contacts:</b>\r\n                {props.profile.contacts.facebook && <p><b>FaceBook:</b> {props.profile.contacts.facebook}</p>}\r\n                {props.profile.contacts.website && <p><b>Web-site:</b> {props.profile.contacts.website}</p>}\r\n                {props.profile.contacts.vk && <p><b>Vk:</b> {props.profile.contacts.vk}</p>}\r\n                {props.profile.contacts.twitter && <p><b>Twitter:</b> {props.profile.contacts.twitter}</p>}\r\n                {props.profile.contacts.instagram &&\r\n                    <p><b>Instagram:</b> {props.profile.contacts.instagram}</p>}\r\n                {props.profile.contacts.youtube && <p><b>YouTube:</b> {props.profile.contacts.youtube}</p>}\r\n                {props.profile.contacts.github && <p><b>GitHub:</b> {props.profile.contacts.github}</p>}\r\n                {props.profile.contacts.mainLink && <p><b>MainLink:</b> {props.profile.contacts.mainLink}</p>}\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\n\r\ntype contactsPropsType = {\r\n    contactTitle: string,\r\n    contactValue: any\r\n}\r\n\r\nexport const Contacts:React.FC<contactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType, savePhoto} from \"../../../redux/Profile-reducer\";\r\nimport {ProfilIStatusWithHook} from \"./ProfilIStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/userFhoto.jpg\";\r\nimport {useAppDispatch} from \"../../../redux/Hooks\";\r\nimport {ProfileDataForm} from \"../Contacts/ProfileDataForm\";\r\nimport {ProfileData} from \"../Contacts/ProfileData\";\r\nimport {Contacts} from \"../Contacts/Contscts\";\r\n\r\ntype ProfileInfo = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatusTC: (status: string) => any\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    contactTitle?: string,\r\n    contactValue?: any\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfo> = React.memo((props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const dispatch = useAppDispatch()\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            dispatch(savePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected} className={s.inputTypeFile}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm notToEditMode={() => {\r\n                        // @ts-ignore\r\n                        setEditMode(false)}} profile={props.profile}/>\r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => {\r\n                        setEditMode(true)}}/>\r\n                }\r\n                <Contacts contactValue={props.contactValue} contactTitle={props.contactValue}/>\r\n                <ProfilIStatusWithHook status={props.status} updateStatusTC={props.updateStatusTC}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"postsContainer\":\"MyPosts_postsContainer__XIroL\",\"imageDiv\":\"MyPosts_imageDiv__xjOgG\",\"postBlock\":\"MyPosts_postBlock__uJD6S\",\"posts\":\"MyPosts_posts__xC0Hj\"};","// extracted by mini-css-extract-plugin\nexport default {\"items\":\"Post_items__043ov\",\"like\":\"Post_like__Q+kHQ\",\"messagePost\":\"Post_messagePost__r7dcB\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string,\r\n    likes: number,\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={s.items}>\r\n            <img\r\n                src={'https://classic.armadon-theme.com/wp-content/uploads/sites/11/avatars/6/6-bpfull.jpg'}\r\n                alt={''}/>\r\n            <span className={s.messagePost}>{props.message}</span>\r\n            <span className={s.like}>{props.likes}</span>\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\nexport default Post","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {myPostsPropsType} from \"./MyPostsConteiner\";\r\nimport {AddMessageForm, ValuesType} from \"../../../Form/Form\";\r\n\r\n\r\nconst MyPosts: React.FC<myPostsPropsType> = React.memo((props) => {\r\n\r\n\r\n    const postsElements = props.profilePage.posts.map(p => <Post key={p.id} message={p.post} likes={p.likesCount}/>)\r\n\r\n\r\n    const addNewPostText = (values: ValuesType) => {\r\n        props.addPostToo(values.message as string)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsContainer}>\r\n            <div className={s.imageDiv}>\r\n                <div className={s.postBlock}>\r\n                    <h3>My post</h3>\r\n                </div>\r\n                <AddMessageForm callback={addNewPostText}/>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default MyPosts","import {addPostActionCreactor, ProfilePageType} from \"../../../redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype mapStatePropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\ntype matDispatchPropsType = {\r\n    addPostToo: (message: string) => void\r\n}\r\n\r\nexport type myPostsPropsType = mapStatePropsType & matDispatchPropsType\r\n\r\nexport const mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nexport const matDispatchToProps = (dispatch: Dispatch): matDispatchPropsType => {\r\n    return {\r\n        addPostToo: (message: string) => {\r\n            dispatch(addPostActionCreactor(message));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, matDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsConteiner\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\n\r\n\r\nconst Profile: React.FC<ProfilePropsType> = React.memo((props) => {\r\n\r\n    return (\r\n    <div>\r\n        <ProfileInfo profile={props.profile}  status={props.status} updateStatusTC={props.updateStatusTC}\r\n                     isOwner={props.isOwner} savePhoto={props.savePhoto}/>\r\n        <MyPostsContainer />\r\n    </div>\r\n    )\r\n})\r\nexport default Profile","import React, {JSXElementConstructor} from 'react';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getUserProfile, ProfileType, savePhoto, setStatusTC, updateStatusTC} from \"../../redux/Profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profile: any | ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean,\r\n    isOwner: boolean,\r\n    savePhoto: any\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => any\r\n    setStatusTC: (userId: number) => any\r\n    updateStatusTC: (status: string) => any\r\n}\r\n\r\nexport type ProfilePropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    refreshProfile() {\r\n        // @ts-ignore\r\n        let userId = this.props.router.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.setStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        // @ts-ignore\r\n        if (this.props.router.params.userId != prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                    // @ts-ignore\r\n                         isOwner={!this.props.router.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatusTC={this.props.updateStatusTC}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n    isOwner: state.profilePage.isOwner,\r\n    savePhoto: state.profilePage.posts\r\n\r\n})\r\n\r\nexport const withRouter = (Component: JSXElementConstructor<any>): JSXElementConstructor<any> => {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{location, navigate, params}}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n//\r\n// export const ProfileContainerToStore = connect(mapStateToProps, {\r\n//     getUserProfile\r\n// })(withRouter(WithUrlDataContainerComponent))\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {getUserProfile, setStatusTC, updateStatusTC, savePhoto}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"names":["AddMessageForm","React","props","formik","useFormik","initialValues","message","validate","value","error","length","onSubmit","values","callback","resetForm","handleSubmit","getFieldProps","placeholder","onBlur","handleBlur","color","variant","sx","mb","errors","touched","style","children","removeButton","type","ProfilIStatusWithHook","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","onChange","e","currentTarget","updateStatusTC","autoFocus","_excluded","Box","options","defaultTheme","defaultClassName","generateClassName","styleFunctionSx","defaultStyleFunctionSx","BoxRoot","styled","inProps","ref","theme","useTheme","_extendSxProp","extendSxProp","component","other","_objectWithoutPropertiesLoose","_jsx","_extends","as","clsx","createBox","createTheme","ClassNameGenerator","ProfileDataForm","dispatch","useAppDispatch","aboutMe","lookingForAJob","lookingForAJobDescription","fullName","contacts","github","website","facebook","instagram","saveProfile","FormControl","FormGroup","Button","size","FormControlLabel","label","control","Checkbox","handleChange","checked","name","ProfileData","isOwner","onClick","goToEditMode","profile","vk","twitter","youtube","mainLink","Contacts","contactTitle","contactValue","Preloader","src","photos","large","userPhoto","target","files","savePhoto","notToEditMode","alt","likes","postsElements","profilePage","posts","map","p","post","likesCount","id","addPostToo","connect","state","addPostActionCreactor","MyPosts","ProfileContainer","userId","this","router","params","authorizedUserId","getUserProfile","setStatusTC","refreshProfile","prevProps","prevState","snapshot","withRouter","Component","location","useLocation","navigate","useNavigate","useParams","compose","auth","isAuth","withAuthRedirect"],"sourceRoot":""}